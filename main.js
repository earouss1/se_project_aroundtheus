!function(){"use strict";const e=document.querySelector("#profile-edit-button"),t=(document.querySelector("#profile-edit-modal"),document.querySelector("#profile-add-modal")),r=(document.querySelector("#profile-text"),document.querySelector("#profile-sub-text"),document.querySelector("[name='text']")),o=document.querySelector("[name='sub-text']"),s=(document.forms["modal-form"],document.querySelector(".elements__list"),document.querySelector("#card-template").content.firstElementChild,document.querySelector("#profile-add-button")),i=(document.forms["add-card-modal-form"],t.querySelector("#form-profile-title"),t.querySelector("#form-profile-url"),document.querySelector("#preview-image-modal")),n=(i.querySelector(".modal__for-preview-image"),i.querySelector(".modal__for-preview-caption"),document.querySelectorAll(".modal__close-button"),document.forms["chng-picture-modal-form"],document.forms["areusure-modal-form"],document.querySelector(".profile__avatar"),document.querySelector("#profile-avatar-edit"));class a{constructor(e){let{modalSelector:t}=e;this._modalElement=document.querySelector(t),this._handleEscapeClose=this._handleEscapeClose.bind(this),this._handleCloseButtons=this._modalElement.querySelector(".modal__close-button")}open(){this._modalElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscapeClose)}close(){this._modalElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscapeClose)}_handleEscapeClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._modalElement.addEventListener("mousedown",(e=>{e.target.classList.contains("modal_opened")&&this.close()})),this._handleCloseButtons.addEventListener("click",(()=>this.close()))}}class l extends a{constructor(e,t){super({modalSelector:e}),this._modalForm=this._modalElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputList=this._modalForm.querySelectorAll(".modal__form-input"),this._modalSubmitButton=this._modalElement.querySelector(".modal__submit-button"),this._modalSubmitButtonText=this._modalSubmitButton.textContent}renderLoadingMessage(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";if(e)return this._modalSubmitButton.textContent=t;this._modalSubmitButton.textContent=this._modalSubmitButtonText}getForm(){return this._modalForm}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._modalForm.reset(),this.close()}))}}class d{constructor(e,t,r,o,s){this._data=e,this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleImageClick=r,this._handleDeleteCardClick=o,this._id=e._id,this._isLiked=e._isLiked,this._handleLikeCardClick=s}_setEventListeners(){this._cardLikeButton.addEventListener("click",(()=>{this._handleLikeCardClick(this)})),this._cardDeleteButton.addEventListener("click",(()=>{this._handleDeleteCardClick(this)})),this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick(this._data)}))}handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}getId(){return this._id}getIsLiked(){return this._isLiked}handleLikeButton(){this._cardLikeButton.classList.toggle("element__composite-like-button_active")}_getCardTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}getView(){return this._cardElement=this._getCardTemplate(),this._cardImageElement=this._cardElement.querySelector(".element__image"),this._cardTitleElement=this._cardElement.querySelector(".element__composite-title"),this._cardDeleteButton=this._cardElement.querySelector(".element__delete-button"),this._cardLikeButton=this._cardElement.querySelector(".element__composite-like-button"),this._cardTitleElement.textContent=this._data.name,this._cardImageElement.src=this._data.link,this._cardImageElement.alt=this._data.name,this._isLiked?this._cardLikeButton.classList.add("element__composite-like-button_active"):this._cardLikeButton.classList.remove("element__composite-like-button_active"),this._setEventListeners(),this._cardElement}}class c{constructor(e,t){this._options=e,this._formElement=t,this._inputElements=[...this._formElement.querySelectorAll(this._options.inputSelector)],this._submitButtonElement=this._formElement.querySelector(this._options.submitButtonSelector)}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}_setEventListeners(){this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState(this._inputElements,this._submitButtonElement,this._options)}))}))}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._options.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._options.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._options.inputErrorClass),t.textContent="",t.classList.remove(this._options.errorClass)}_toggleButtonState(){let e=!1;if(this._inputElements.forEach((t=>{t.validity.valid||(e=!0)})),!e)return this._enableButton();this.disableButton()}disableButton(){this._submitButtonElement.classList.add(this._options.inactiveButtonClass),this._submitButtonElement.disabled=!0}_enableButton(){this._submitButtonElement.classList.remove(this._options.inactiveButtonClass),this._submitButtonElement.disabled=!1}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}resetValidation(){this._toggleButtonState(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}}const m=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{throw console.error(e),e}))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{throw console.error(e),e}))}loadAllData(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}createNewCard(e){let{name:t,link:r}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{throw console.error(e),e}))}setUserUpdate(e){let{profileText:t,profileSubText:r}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{throw console.error(e),e}))}deleteCards(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{throw console.error(e),e}))}addLikeforCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{throw console.error(e),e}))}removeLikefromCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{throw console.error(e),e}))}setPictureUpdate(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{throw console.error(e),e}))}}({baseUrl:" https://around-api.en.tripleten-services.com/v1",headers:{authorization:"85fd4e98-2985-4ae5-a23e-063a04cf6983","Content-Type":"application/json"}});function h(e){return new d(e,"#card-template",L,y,k).getView()}const u=new class{constructor(e,t){let{items:r,renderer:o}=e;this._renderer=o,this._items=r,this._container=document.querySelector(t)}renderItems(e){(e||this._items).forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}empty(){this._container.innerHTML=""}}({renderer:e=>{u.addItem(h(e))}},".elements__list"),_={};var p;p={formSelector:".modal__form",inputSelector:".modal__form-input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__form-input_type_error",errorClass:"modal__form-error_visible"},Array.from(document.querySelectorAll(p.formSelector)).forEach((e=>{const t=new c(p,e),r=e.getAttribute("name");_[r]=t,t.enableValidation()}));const f=new class{constructor(e){let{profileName:t,profileJob:r,profilePicture:o}=e;this._profileName=document.querySelector(t),this._profileJob=document.querySelector(r),this._profilePicture=document.querySelector(o)}getUserInfo(){return{profileText:this._profileName.textContent,profileSubText:this._profileJob.textContent,avatar:this._profilePicture.src}}setUserInfo(e){let{name:t,about:r,avatar:o}=e;this._profileName.textContent=t,this._profileJob.textContent=r}setUserPicture(e){let{avatar:t}=e;this._profilePicture.src=t}}({profileName:"#profile-text",profileJob:"#profile-sub-text",profilePicture:".profile__avatar"}),E=new l("#profile-add-modal",(function(e){let{title:t,url:r}=e;const o={name:t,link:r};E.renderLoadingMessage(!0),m.createNewCard(o).then((e=>{u.addItem(h(e)),E.close(),_["add-cards"].disableButton()})).catch((e=>{console.error("Error occured while adding card",e)})).finally((()=>{E.renderLoadingMessage()}))}));E.setEventListeners();const b=new l("#profile-edit-modal",(function(e){f.setUserInfo({profileText:e.text,profileSubText:e["sub-text"]}),b.renderLoadingMessage(!0);const t={profileText:e.text,profileSubText:e["sub-text"]};m.setUserUpdate(t).then((e=>{f.setUserInfo(e),b.close(),_["edit-profile"].disableButton()})).catch((e=>{console.error("Error has occured",e)})).finally((()=>{b.renderLoadingMessage()}))}));b.setEventListeners();const v=new l("#profile-chng-modal",(function(e){const t=e.profilePicUrl;console.log(e),t||console.error("Link is missing"),v.renderLoadingMessage(!0),m.setPictureUpdate(t).then((e=>{console.log(e),f.setUserPicture(e),v.close(),_["profile-pic-chng"].disableButton()})).catch((e=>{console.error(`An error happened when updating user information: ${e}`)})).finally((()=>{v.renderLoadingMessage()}))}));v.setEventListeners();const S=new class extends a{constructor(e){super(e),this._image=this._modalElement.querySelector(".modal__for-preview-image"),this._caption=this._modalElement.querySelector(".modal__for-preview-caption")}open(e){let{link:t,name:r}=e;this._image.src=t,this._image.alt=r,this._caption.textContent=r,super.open()}}({modalSelector:"#preview-image-modal"});S.setEventListeners();const g=new class extends a{constructor(e){let{modalSelector:t}=e;super({modalSelector:t}),this._modalSubmitButton=this._modalElement.querySelector(".modal__submit-button"),this._modalSubmitButtonText=this._modalSubmitButton.textContent,this._modalForm=this._modalElement.querySelector(".modal__form")}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Deleting...";if(e)return this._modalSubmitButton.textContent=t;this._modalSubmitButton.textContent=this._modalSubmitButtonText}setEventListeners(){super.setEventListeners(),this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleRemoveVerify()}))}handleRemoveVerify(e){this._handleRemoveVerify=e}}({modalSelector:"#chng-img-qt-modal"});function L(e){S.open(e)}function y(e){g.open(),g.handleRemoveVerify((()=>{g.renderLoading(!0),m.deleteCards(e._id).then((()=>{e.handleDeleteCard(),g.close()})).catch((e=>{console.error("Error occured while deleting card",e)})).finally((()=>{g.renderLoading()}))}))}function k(e){e.getIsLiked()?m.removeLikefromCard(e.getId()).then((()=>{e.handleLikeButton()})).catch((e=>{console.error(`Can't remove like. Check again: ${e}`)})):m.addLikeforCard(e.getId()).then((()=>{e.handleLikeButton()})).catch((e=>{console.error(`Can't add like. Please check again: ${e}`)}))}g.setEventListeners(),e.addEventListener("click",(()=>{const e=f.getUserInfo();r.value=e.profileText,o.value=e.profileSubText,b.open()})),s.addEventListener("click",(()=>{E.open()})),n.addEventListener("click",(()=>{v.open()})),m.loadAllData().then((e=>{let[t,r]=e;u.renderItems(t),f.setUserInfo(r),f.setUserPicture({avatar:r.avatar})})).catch((e=>{console.error(`Can't load card or picture: ${e}`)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,